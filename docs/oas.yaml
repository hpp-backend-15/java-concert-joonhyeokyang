openapi: 3.1.0
info:
  title: 콘서트 예약 시스템 - OpenAPI 3.1
  description: |-
    항해 플러스 3주차+ 과제로 진행되는 콘서트 예약 시스템입니다.

    관련 링크:
    - [깃허브 레포지토리](https://github.com/hpp-backend-15/java-concert-joonhyeokyang)

  termsOfService: https://en.meming.world/wiki/File:We_Don%27t_Do_That_Here.jpg/
  contact:
    email: highestbright98@naver.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: concert
    description: 콘서트 날짜/좌석 정보 작업
  - name: reservation
    description: 콘서트 좌석 예약 관련 작업
  - name: queue
    description: 대기열 관련 작업
paths:
  /queue:
    post:
      tags:
        - queue
      summary: 대기열에 등록한다.
      description: 대기열에 등록한다. 기 존재하는 대기열이 있다면, 해당 토큰을 반환한다. 쿠키에 JSESSIONID를 삽입한다. 이후 해당 세션 ID로 대기열을 확인한다.
      operationId: registerQueue
      responses:
        '201':
          description: 대기열 등록 완료
          headers:
            X-WAIT-TOKEN:
              $ref: '#/components/schemas/Token'
        '204':
          description: 이미 등록된 대기자입니다. (기 등록 토큰 반환)
          headers:
            X-WAIT-TOKEN:
              $ref: '#/components/schemas/Token'
  /concerts/{concertId}/performanceDates:
    get:
      tags:
        - concert
      summary: 콘서트 예약 가능 일자 확인
      description: 해당 콘서트의 모든 예약 가능한 일자를 조회한다
      operationId: findConcertPerformaceDates
      parameters:
        - name: concertId
          in: path
          description: 콘서트 Id
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  availablePerformanceDates:
                    type: array
                    description: 예약 가능한 공연일자 목록
                    items:
                      $ref: '#/components/schemas/PerformanceDate'
                  unavailablePerformanceDates:
                    type: array
                    description: 예약 불가능한 공연일자 목록
                    items:
                      $ref: '#/components/schemas/PerformanceDate'
        '301':
          description: 301 Redirect /queue (ACTIVE하지 않은 토큰을 갖는 유저)
        '400':
          description: Invalid ConcertId value
        '404':
          description: No Such Conecrt
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /concerts/{concertId}/performanceDates/{performaceDateId}/seats:
    get:
      tags:
        - concert
      summary: 콘서트 예약 가능한 일자의 예악 가능한 좌석 확인
      description: 해당 콘서트 일자의 모든 예약 가능한 좌석을 반환한다.
      operationId: findConcertPerformaceDatesSeats
      parameters:
        - name: concertId
          in: path
          description: 콘서트 Id
          required: true
          schema:
            type: string
            example: 1
        - name: performaceDateId
          in: path
          description: 콘서트 공연일
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  availableSeats:
                    type: array
                    description: 예약 가능한 좌석 목록
                    items:
                      $ref: '#/components/schemas/Seat'
                  unavailableSeats:
                    type: array
                    description: 예약 불가능한 좌석 목록
                    items:
                      $ref: '#/components/schemas/Seat'
        '301':
          description: 301 Redirect /queue (ACTIVE하지 않은 토큰을 갖는 유저)
        '400':
          description: Invalid ConcertId/PerformanceDateId
        '404':
          description: No Such Conecrt/PerformanceDate
  /reservations:
    post:
      tags:
        - reservation
      summary: 좌석 예약 요청
      description: 콘서트, 공연 날짜, 좌석에 대한 좌석 예약을 요청합니다.
      requestBody:
        description: 예약할 콘서트, 공연 날짜, 좌석 정보
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                concertId:
                  type: integer
                  description: 콘서트 ID
                  example: 123
                performanceDateId:
                  type: integer
                  description: 공연 날짜 ID
                  example: 456
                seatId:
                  type: array
                  description: 좌석 ID
                  example: [789, 123]
                userId:
                  type: integer
                  description: 예약을 요청하는 유저 ID
                  example: 1
      responses:
        '201':
          description: 예약 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationId:
                    type: integer
                    description: 생성된 예약 ID
                    example: 101
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
        '409':
          description: 예약 충돌 (이미 예약된 좌석 등)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "이미 선택된 좌석입니다"
        '301':
          description: 301 Redirect /queue (ACTIVE하지 않은 토큰을 갖는 유저)
  /accounts/{userId}/charge:
    post:
      tags:
        - account
      summary: 잔액 충전 요청
      description: 사용자 식별자와 금액을 받아 잔액을 충전합니다.
      parameters:
        - name: userId
          in: path
          required: true
          description: 충전할 사용자 식별자
          schema:
            type: string
      requestBody:
        description: 충전할 금액 정보
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  description: 충전할 금액
                  example: 10000
      responses:
        '200':
          description: 충전 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  chargedAmount:
                    type: number
                    description: 충전된 금액
                    example: 10000
                  timestamp:
                    type: string
                    format: date-time
                    description: 충전 완료 시간
                    example: "2024-10-10T12:34:56Z"
                  balance:
                    type: number
                    description: 충전 후 잔액
                    example: 50000
        '409':
          description: 충전 실패 (낙관적 잠금 충돌 등)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 충전 실패 사유
                    example: "Failed due to concurrent access."
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 잘못된 요청에 대한 설명
                    example: "Invalid input data."
  /accounts/{userId}:
    get:
      tags:
        - account
      summary: 잔액 조회 요청
      description: 사용자 식별자를 받아 해당 사용자의 잔액을 조회합니다.
      parameters:
        - name: userId
          in: path
          required: true
          description: 조회할 사용자 식별자
          schema:
            type: string
      responses:
        '200':
          description: 잔액 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    description: 사용자 계좌 잔액
                    example: 50000
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 사용자 식별자에 해당하는 사용자를 찾을 수 없다는 설명
                    example: "User not found."
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 잘못된 요청에 대한 설명
                    example: "Invalid input data."
  /pay:
    post:
      tags:
        - pay
      summary: "결제 요청"
      description: "사용자가 예약 결제를 시도합니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: "유저 식별자"
                  example: 123
                reservationId:
                  type: integer
                  description: "예약 식별자"
                  example: 456
      responses:
        '200':
          description: "결제 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationId:
                    type: integer
                    description: "예약 식별자"
                    example: 456
        '400':
          description: "잘못된 요청 - 예약 정보가 없거나 만료됨"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "예약 정보가 없습니다. 또는 만료된 예약입니다."
        '409':
          description: "충돌 - 잔액 부족"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "잔액 부족"
        '500':
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "서버에서 오류가 발생했습니다."
components:
  schemas:
    Reservation:
      type: object
      properties:
        concertId:
          type: integer
          description: 콘서트 ID
        performanceDateId:
          type: integer
          description: 공연 날짜 ID
        seatId:
          type: integer
          description: 좌석 ID
        userId:
          type: integer
          description: 유저 ID
    Concert:
      type: object
      description: 콘서트 관련 정보
      properties:
        id:
          type: integer
          description: 공연 Id
          example: 1
        performer:
          type: string
          description: 공연자 정보
          example: 양준혁

    Seat:
      type: object
      description: 콘서트 좌석 정보
      properties:
        id:
          type: integer
          description: 좌석 Id
          example: 1
        status:
          type: string
          example: AVAILABLE
          enum:
            - AVAILABLE
            - PENDING
            - UNAVAILABLE
    PerformanceDate:
      type: object
      description: 공연 가능일자 정보
      properties:
        id:
          type: integer
          descrpition: 공연 가능일자 Id
          example: 1
        performanceDate:
          type: string
          format: date
          exampe: 2024-12-25

    Token:
      type: object
      description: 대기열에 등록된 토큰 정보
      properties:
        sessionId:
          type: string
          description: 유저의 세션Id
          example: 1234asdu410gfi0df
        timeLeft:
          type: string
          foramt: time
          example: 12:59:59 (hh:MM:ss)
        xml:
          name: token

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'

  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header