spring:
  datasource:
    url: jdbc:mysql://db:3306/concert
    username: root
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 100 #최대 pool 크기
      minimum-idle: 10 #최소 pool 크기
      idle-timeout: 600000 #연결위한 최대 유후 시간
      max-lifetime: 1800000 #반납된 커넥션의 최대 수명

  jpa:
    hibernate:
      ddl-auto:
    properties:
      hibernate.default_batch_fetch_size: 1000

  sql:
    init:
      mode: always # 서버 시작시 항상 classpath의 sql문을 실행하도록 설정
      continue-on-error: true # 서버 시작시 sql문을 실행할 때 오류 무시하고 계속 진행
#      data-locations: classpath:sql/dml.sql # 서버 시작시 dml sql문을 실행할 위치 및 파일 지정
      schema-locations: classpath:sql/ddl.sql # 서버 시작시 ddl sql문을 실행할

  data:
    redis:
      port: 6379
      host: redis
      prefix: "redis://"

  kafka:
    topic:
      names: pay_event
    bootstrap-servers: kafka-1:29092,kafka-2:29093,kafka-3:29094
    listener:
      concurrency: 3
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: pay-consumer-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: latest



otel:
  exporter:
    otlp:
      protocol: grpc
      endpoint: http://otel-collector:4317
  service:
    name: springboot


management:
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    enabled: true
    sampling:
      probability: 1.0 # 100% 샘플링
  metrics:
    export:
      otlp:
        enabled: true
        endpoint: http://otel-collector:4317
        protocol: grpc
  prometheus:
    metrics:
      export:
        enabled: true
