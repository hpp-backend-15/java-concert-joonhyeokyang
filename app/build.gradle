import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    dependencies {
        classpath 'com.joonhyeok:api-codegen:0.0.1-SNAPSHOT'
    }
}


plugins {
    id "org.openapi.generator" version "7.9.0"
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'idea'
}

dependencyManagement {
    imports {
        mavenBom("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.6.0")
    }
}

group = 'com.joonhyeok'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.openapitools:openapi-generator:7.9.0"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation("org.mapstruct:mapstruct:1.5.3.Final")
    implementation 'com.mysql:mysql-connector-j'
    implementation("org.projectlombok:lombok-mapstruct-binding:0.2.0")
    implementation 'org.redisson:redisson-spring-boot-starter:3.34.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind'


    //otel
    implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter:2.6.0")
    implementation 'ch.qos.logback:logback-classic:1.5.12'
    implementation("io.opentelemetry:opentelemetry-exporter-jaeger:1.30.1")
    implementation 'io.opentelemetry.javaagent.instrumentation:opentelemetry-javaagent-redisson-common:2.6.0-alpha'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.micrometer:micrometer-registry-otlp'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'

    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    implementation 'org.springframework.kafka:spring-kafka'
    compileOnly 'org.projectlombok:lombok'

    // test containers settings
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
    testImplementation 'io.zonky.test:embedded-database-spring-test:2.5.1'
    testImplementation "org.testcontainers:testcontainers:1.20.3"
    testImplementation "org.testcontainers:junit-jupiter:1.20.3"
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'com.mysql:mysql-connector-j'

    testImplementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.3.Final")
    testAnnotationProcessor("org.mapstruct:mapstruct-processor:1.5.3.Final")

}

//configurations {
//    all {
//        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//        exclude group: 'ch.qos.logback', module: 'logback-classic'
//        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
//    }
//}

//test {
//    useJUnitPlatform()
//}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}


def swaggerRoot = "$projectDir/src/main/codegen-config".toString()
def swaggerAPIOutput = "$projectDir/src/main".toString()



openApiValidate {
    inputSpec = "$swaggerRoot/api-concert-contract.yaml".toString()
    recommend = true
}

openApiGenerate {
    inputSpec = "$swaggerRoot/api-concert-contract.yaml".toString()
    generatorName = "custom-codegen"
    configFile = "$swaggerRoot/config.json".toString()
    outputDir = "$swaggerAPIOutput".toString()
    configOptions = [
            "sourceFolder": "openapi-generated"
    ]
}

tasks.named("openApiGenerate") {

    it.doLast {
        delete "$projectDir/src/main/pom.xml"
        delete "$projectDir/src/main/README.md"
        delete "$projectDir/src/main/.openapi-generator-ignore"
        delete "$projectDir/src/main/.openapi-generator"
        delete "$projectDir/src/main/resources" + "/" + "swagger"

    }
}


task openApiYmlGenerate(type: GenerateTask) {
    inputSpec = "$swaggerRoot/api-concert-contract.yaml".toString()
    generatorName = "openapi-yaml".toString()
    outputDir = "$swaggerAPIOutput/resources/swagger/".toString()
    configOptions = [
            outputFile: "openapi.yml"
    ]

    def outputDir = "$projectDir/src/main/resources"
    it.doLast {
        delete outputDir + "/" + "swagger"
    }
}
tasks.processResources.dependsOn tasks.openApiYmlGenerate
tasks.openApiGenerate.dependsOn tasks.openApiValidate
tasks.openApiYmlGenerate.dependsOn tasks.openApiGenerate
tasks.compileJava.dependsOn tasks.openApiGenerate, tasks.openApiYmlGenerate, tasks.openApiValidate
sourceSets.main.java.srcDir "${openApiGenerate.outputDir.get()}/${openApiGenerate.configOptions['sourceFolder'].get()}"
sourceSets.main.resources.srcDir "${openApiGenerate.outputDir.get()}/src/main/resources"
