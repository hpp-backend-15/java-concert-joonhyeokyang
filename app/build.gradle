import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    dependencies {
        classpath 'com.joonhyeok:api-codegen:0.0.1-SNAPSHOT'
    }
}

plugins {
    id "org.openapi.generator" version "7.9.0"
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'idea'
}



group = 'com.joonhyeok'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.openapitools:openapi-generator:7.9.0"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.named('test') {
    useJUnitPlatform()
}


def swaggerRoot = "$projectDir/src/main/codegen-config".toString()
def swaggerAPIOutput = "$projectDir/src/main".toString()


openApiValidate {
    inputSpec = "$swaggerRoot/api-concert-contract.yaml".toString()
    recommend = true
}

openApiGenerate {
    inputSpec = "$swaggerRoot/api-concert-contract.yaml".toString()
    generatorName = "custom-codegen"
    configFile = "$swaggerRoot/config.json".toString()
    outputDir = "$swaggerAPIOutput".toString()
    configOptions = [
            "sourceFolder": "openapi-generated"
    ]
}

tasks.named("openApiGenerate") {

    it.doLast {
        delete "$projectDir/src/main/pom.xml"
        delete "$projectDir/src/main/README.md"
        delete "$projectDir/src/main/.openapi-generator-ignore"
        delete "$projectDir/src/main/.openapi-generator"
        delete "$projectDir/src/main/resources" + "/" + "swagger"

    }
}


task openApiYmlGenerate(type: GenerateTask) {
    inputSpec = "$swaggerRoot/api-concert-contract.yaml".toString()
    generatorName = "openapi-yaml".toString()
    outputDir = "$swaggerAPIOutput/resources/swagger/".toString()
    configOptions = [
            outputFile: "openapi.yml"
    ]

    def outputDir = "$projectDir/src/main/resources"
    it.doLast {
        delete outputDir + "/" + "swagger"
    }
}
tasks.openApiGenerate.dependsOn tasks.openApiValidate
tasks.openApiYmlGenerate.dependsOn tasks.openApiGenerate
tasks.compileJava.dependsOn tasks.openApiGenerate, tasks.openApiYmlGenerate
sourceSets.main.java.srcDir "${openApiGenerate.outputDir.get()}/${openApiGenerate.configOptions['sourceFolder'].get()}"
sourceSets.main.resources.srcDir "${openApiGenerate.outputDir.get()}/src/main/resources"
